class DBHelper{static get DATABASE_URL(){const port=8000;return `http://localhost:${port}/data/restaurants.json`}
    static fetchRestaurants(callback){let xhr=new XMLHttpRequest();xhr.open('GET',DBHelper.DATABASE_URL);xhr.onload=()=>{if(xhr.status===200){const json=JSON.parse(xhr.responseText);const restaurants=json.restaurants;callback(null,restaurants)}else{const error=(`Request failed. Returned status of ${xhr.status}`);callback(error,null)}};xhr.send()}
    static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant)}else{callback('Restaurant does not exist',null)}}})}
    static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}
    static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}
    static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants;if(cuisine!='All Cuisines'){results=results.filter(r=>r.cuisine_type==cuisine)}
        if(neighborhood!='All Neighborhoods'){results=results.filter(r=>r.neighborhood==neighborhood)}
        callback(null,results)}})}
    static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}
    static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}
    static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`)}
    static webpSrcsetForRestaurant(restaurant){return `public/img/webp/1024w/${restaurant.photograph.replace('.jpg', '.webp')} 1024w, public/img/webp/640w/${restaurant.photograph.replace('.jpg', '.webp')} 640w, public/img/webp/320w/${restaurant.photograph.replace('.jpg', '.webp')} 320w`}
    static imageSrcsetForRestaurant(restaurant){return `public/img/jpg/1024w/${restaurant.photograph} 1024w, public/img/jpg/640w/${restaurant.photograph} 640w, public/img/jpg/320w/${restaurant.photograph} 320w`}
    static imageUrlForRestaurant(restaurant){return `public/img/jpg/320w/${restaurant.photograph}`}
    static mapMarkerForRestaurant(restaurant,map){return new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP})}}