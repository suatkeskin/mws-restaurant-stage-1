"use strict";var _createClass=function(){function r(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,n,t){return n&&r(e.prototype,n),t&&r(e,t),e}}();function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var dbPromise=void 0;document.addEventListener("DOMContentLoaded",function(){dbPromise=openIndexedDB()});var openIndexedDB=function(){return"serviceWorker"in navigator?idb.open("restaurants-db",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("by-id","id")}):Promise.resolve()},DBHelper=function(){function u(){_classCallCheck(this,u)}return _createClass(u,null,[{key:"REMOTE_SERVER_URL",value:function(e){var n="http://localhost:1337/restaurants";return e&&(n+="/"+e),n}},{key:"fetchRestaurants",value:function(n,t){fetch(u.REMOTE_SERVER_URL(n)).then(function(e){return 200===e.status?e.json():null}).then(function(e){return e?u.saveRestaurantsToIndexedDB(e):u.loadRestaurantsFromIndexedDB(n)}).catch(function(e){return console.error("Can not fetch restaurants from remote server, will load from database!"),console.error(e),u.loadRestaurantsFromIndexedDB(n)}).then(function(e){return t(null,e)})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,a,o){u.fetchRestaurants(null,function(e,n){if(e)o(e,null);else{var t=n;"All Cuisines"!==r&&(t=t.filter(function(e){return e.cuisine_type===r})),"All Neighborhoods"!==a&&(t=t.filter(function(e){return e.neighborhood===a})),o(null,t)}})}},{key:"fetchNeighborhoods",value:function(a){u.fetchRestaurants(null,function(e,t){if(e)a(e,null);else if(t){var r=t.map(function(e,n){return t[n].neighborhood}),n=r.filter(function(e,n){return r.indexOf(e)===n});a(null,n)}else a("No restaurants available",null)})}},{key:"fetchCuisines",value:function(a){u.fetchRestaurants(null,function(e,t){if(e)a(e,null);else{var r=t.map(function(e,n){return t[n].cuisine_type}),n=r.filter(function(e,n){return r.indexOf(e)===n});a(null,n)}})}},{key:"loadRestaurantsFromIndexedDB",value:function(r){return dbPromise.then(function(e){var n=e.transaction("restaurants").objectStore("restaurants"),t=n.index("by-id");return r?n.get(Number(r)):t.getAll()}).then(function(e){return e})}},{key:"saveRestaurantsToIndexedDB",value:function(r){return dbPromise.then(function(e){if(r){var n=e.transaction("restaurants","readwrite"),t=n.objectStore("restaurants");return r instanceof Array?r.forEach(function(e){t.put(e)}):t.put(r),n.complete}}).then(function(){return r})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"webpSrcsetForRestaurant",value:function(e){return"public/img/webp/1024w/"+e.photograph+".webp 1024w, public/img/webp/640w/"+e.photograph+".webp 640w, public/img/webp/320w/"+e.photograph+".webp 320w"}},{key:"imageSrcsetForRestaurant",value:function(e){return"public/img/jpg/1024w/"+e.photograph+".jpg 1024w, public/img/jpg/640w/"+e.photograph+".jpg 640w, public/img/jpg/320w/"+e.photograph+".jpg 320w"}},{key:"imageUrlForRestaurant",value:function(e){if(e.photograph)return"public/img/jpg/320w/"+e.photograph+".jpg"}},{key:"mapMarkerForRestaurant",value:function(e,n){return new google.maps.Marker({position:e.latlng,title:e.name,url:u.urlForRestaurant(e),map:n,animation:google.maps.Animation.DROP})}}]),u}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
